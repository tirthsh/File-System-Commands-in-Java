// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name:
// UT Student #:
// Author:
//
// Student2:
// UTORID user_name:
// UT Student #:
// Author:
//
// Student3:
// UTORID user_name:
// UT Student #:
// Author:
//
// Student4:
// UTORID user_name:
// UT Student #:
// Author:
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package driver;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import commands.*;
import fileSystem.fileSystem;


public class JShell {
  
  public static final String EXIT_COMMAND = "exit";

  /**
   * Main driver method, checks the input for command and path validitiy, if
   * valid and file/dir exists, execute that command on the file/dir and reflect
   * changes to file system.
   * @param input from user
   */
  public static void main(final String[] args) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
    
    // Create a buffered reader to read the input
     BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
     history HistoryCommand = new history();
     
     System.out.println("Enter some commands, or " + EXIT_COMMAND + " to quit");
     
     String[] validCommands;
     
     // keep repeating until exit command
     boolean on = true;
     while (on) {
        System.out.print("> ");
        
        // store the input line as a string
        String input = br.readLine();
        
        // create objects of each command
        fileSystem fs = fileSystem.getFileSystemFp();
        HistoryCommand.add(input);
        cat CatCommand = new cat();
        cd CdCommand = new cd();
        echo EchoCommand = new echo();
        man ManCommand = new man();
        mkdir MkdirCommand = new mkdir();
        pwd PwdCommand = new pwd();
        pushd PushdCommand = new pushd();
        popd PopdCommand = new popd();
        
        // create a Validator object to validate the command
        Validator validator = new Validator();
        
        // conditional if statements to checks for a command length
        if (input.length() == 0){
        }
        
        else if (input.length() > 0 && input.length() < 2){
          System.out.println("That is not a valid command, please enter a"
              + " valid command.");
        }
        
        else if (input.length() == EXIT_COMMAND.length() && input.toLowerCase().equals(EXIT_COMMAND)) {
          System.out.println("Exiting. Thanks for using JShell.");
          on = false;
          return;
        }
        
        else {
          String[] is_valid;
          is_valid = validator.Validate_command(input);

          if (is_valid[0].equals("true")){
          
            if (is_valid[1].equals("history") && is_valid[2] == null){
              HistoryCommand.execute();
            }
            
            else if (is_valid[1].equals("history") && is_valid.length == 3){
              int historyIndex = 0;
              try {
              historyIndex = Integer.parseInt(is_valid[2]);
              }
              catch (NumberFormatException e) {
                System.out.println("Index for history is invalid");
              }
              HistoryCommand.executeUpto(historyIndex);
            }
            else if (is_valid[1].equals("cd")){
              CdCommand.execute(is_valid[2]);
            }
            else if (is_valid[1].equals("ls")){
              String[] path = is_valid[2].split(" ");
              
            }
            else if (is_valid[1].equals("cat")){
              String[] path = is_valid[2].split(" ");
              List<String> list_path = new ArrayList<String>(Arrays.asList(path));
              CatCommand.execute(list_path);
            }
            else if (is_valid[1].equals("echo")){
              String[] path = is_valid[2].split(" ");
              List<String> list_path = new ArrayList<String>(Arrays.asList(path));
              EchoCommand.execute(list_path);
            }
            else if (is_valid[1].equals("pwd")){
              PwdCommand.execute();
            }
            else if (is_valid[1].equals("pushd")){
              PushdCommand.execute(is_valid[2]);
            }
            else if (is_valid[1].equals("mkdir")){
              String[] path = is_valid[2].split(" ");
              List<String> list_path = new ArrayList<String>(Arrays.asList(path));
              MkdirCommand.execute(list_path);
            }
            else if (is_valid[1].equals("man")){
              ManCommand.execute(is_valid[2]);
            }
            //else {
            //System.out.println("...response goes here...  " + is_valid[0] + ' ' 
            //   + is_valid[1]+ ' ' + is_valid[2] + ' ' + is_valid[3]);
          }
        else {
          System.out.println("That is not a valid command");
          }
         }
       }      
     }    
  }



